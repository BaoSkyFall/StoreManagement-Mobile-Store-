#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Management_Store
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StoreManagement")]
	public partial class DataStoreManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
    #endregion
		
		public DataStoreManagementDataContext() : 
				base(global::Management_Store.Properties.Settings.Default.StoreManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCTs
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private string _CATEGORY;
		
		private string _PRODUCER;
		
		private int _PURCHASE_PRICE;
		
		private int _PRICE;
		
		private int _INVENTORY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnCATEGORYChanging(string value);
    partial void OnCATEGORYChanged();
    partial void OnPRODUCERChanging(string value);
    partial void OnPRODUCERChanged();
    partial void OnPURCHASE_PRICEChanging(int value);
    partial void OnPURCHASE_PRICEChanged();
    partial void OnPRICEChanging(int value);
    partial void OnPRICEChanged();
    partial void OnINVENTORYChanging(int value);
    partial void OnINVENTORYChanged();
    #endregion
		
		public PRODUCT()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CATEGORY
		{
			get
			{
				return this._CATEGORY;
			}
			set
			{
				if ((this._CATEGORY != value))
				{
					this.OnCATEGORYChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY = value;
					this.SendPropertyChanged("CATEGORY");
					this.OnCATEGORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCER", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PRODUCER
		{
			get
			{
				return this._PRODUCER;
			}
			set
			{
				if ((this._PRODUCER != value))
				{
					this.OnPRODUCERChanging(value);
					this.SendPropertyChanging();
					this._PRODUCER = value;
					this.SendPropertyChanged("PRODUCER");
					this.OnPRODUCERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PURCHASE_PRICE", DbType="Int NOT NULL")]
		public int PURCHASE_PRICE
		{
			get
			{
				return this._PURCHASE_PRICE;
			}
			set
			{
				if ((this._PURCHASE_PRICE != value))
				{
					this.OnPURCHASE_PRICEChanging(value);
					this.SendPropertyChanging();
					this._PURCHASE_PRICE = value;
					this.SendPropertyChanged("PURCHASE_PRICE");
					this.OnPURCHASE_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Int NOT NULL")]
		public int PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INVENTORY", DbType="Int NOT NULL")]
		public int INVENTORY
		{
			get
			{
				return this._INVENTORY;
			}
			set
			{
				if ((this._INVENTORY != value))
				{
					this.OnINVENTORYChanging(value);
					this.SendPropertyChanging();
					this._INVENTORY = value;
					this.SendPropertyChanged("INVENTORY");
					this.OnINVENTORYChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
